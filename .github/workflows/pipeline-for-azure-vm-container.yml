name: CI/CD Pipeline for Spring Boot to Azure VM using Docker and ACR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test with Gradle and Docker
    runs-on: ubuntu-latest
    env:
      PROD_MYSQL_URL: ${{ secrets.PROD_MYSQL_URL }}
      PROD_MYSQL_USERNAME: ${{ secrets.PROD_MYSQL_USERNAME }}
      PROD_MYSQL_PASSWORD: ${{ secrets.PROD_MYSQL_PASSWORD }}
      SPRING_PROFILES_ACTIVE: ${{ secrets.SPRING_PROFILES_ACTIVE }}

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. JDK 설정
      - name: Set Up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      # 3. Gradle 빌드 및 테스트
      - name: Build and Test with Gradle
        run: |
          ./gradlew clean build -Dspring.profiles.active=prod

      # 4. Docker 빌드 및 ACR에 푸시
      - name: Build Docker Image
        run: |
          docker build --build-arg SPRING_PROFILES_ACTIVE=prod -t ${{ secrets.ACR_NAME }}.azurecr.io/spring-boot-app:${{ github.sha }} .

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Push Docker Image to ACR
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/spring-boot-app:${{ github.sha }}

  deploy:
    name: Deploy to Azure VM using Docker
    runs-on: ubuntu-latest
    needs: build  # 빌드 및 테스트 이후 실행

    steps:
      # 1. Azure 로그인
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2. Azure VM에 Docker 설치 확인
      - name: Ensure Docker is Installed on Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          port: 22
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker

      # 3. Docker 이미지 다운로드 및 실행
      - name: Deploy Docker Image to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          port: 22
          script: |
            # Azure VM에서 Docker 로그인
            sudo docker login ${{ secrets.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

            # Docker 이미지를 ACR에서 pull
            sudo docker pull ${{ secrets.ACR_NAME }}.azurecr.io/spring-boot-app:${{ github.sha }}

            # 기존 컨테이너 종료 및 새로운 컨테이너 실행
            sudo docker stop spring-boot-app || true
            sudo docker rm spring-boot-app || true
            sudo docker run -d --name spring-boot-app -p 80:80 \
              -e PROD_MYSQL_URL="${{ secrets.PROD_MYSQL_URL }}" \
              -e PROD_MYSQL_USERNAME="${{ secrets.PROD_MYSQL_USERNAME }}" \
              -e PROD_MYSQL_PASSWORD="${{ secrets.PROD_MYSQL_PASSWORD }}" \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.ACR_NAME }}.azurecr.io/spring-boot-app:${{ github.sha }}

            echo "Docker container running. Checking status..."
            sudo docker ps